注解：
定义：注解（annotation）,也叫元数据。一种代码级别的说明，jdk1.5及之后版本引入的一个特性，与类，接口，枚举是在同一层次。它可以声明在
包，类，字段，方法，局部变量，方法参数等的前面，用来对这些元素进行说明，注释。
*作用分类：
    1.编写文档：通过代码里标识的注解生成doc文档
                *javadoc命令编译含有注解的类文件，生成doc文档
    2.代码分析：通过代码里标识的注解对代码进行分析[使用反射]
    3.编译检查：通过代码里标识的注解让编译器让编译器能够实现基本的编译检查[Override]
 *jdk中预定义的一些注解
      *@Override:检测被该注解标注的方法是否是继承自父类（接口）的
              例如：类中的toString（）方法上的注解@Override;每个类都间接或直接的继承至Object类，而@Overried则检测toString()方法
              是否是继承是Object中toString()的方法，若是就能打印对象，若报错，则表明该方法是该类中特有的方法，不是继承来的，就不能
              打印对象。
       
              ***关于Object类的扩展***********
              1).Object类是所有类的父类，位于java.lang包中。
              2).数组也是Object类的子类。
               * Object类的常用方法有：
                             toString()：
                                 *将任何一个对象转换成字符串返回，System.out.println()会调用toString()方法，打印对象。
                                 *在类中如果不重写toString()方法， 结果会打印一个对象的哈希码值，地址的字符串，十六进制
                                 *在类中重写toString()方法，结果会打印出对象的属性
                              equals()：
                                  *java当中所有类都是继承与Object这个基类，在Object的基类中定义了一个equals()的方法，这个方法的初始行为
                                  是比较对象的内存地址，但是在一些类库中这个方法被覆盖掉了，如String,Integer,Date在这些类中equals()方法
                                  有其自身的实现，覆盖了Object基类的equals()方法，会进行对象中内容详细的比较
                                  *情况一：当某个类没有覆盖equals()方法，当通过equals()方法比较两个对象时，等价于“==”，即比较两个对象的内存地址
                                  *情况二：当某个类覆盖了equals()方法时，当通过equals()方法比较两个对象时，这时比较的是俩个对象的内容，
                              hashCode()：
                                  *获取对象的哈希码值，为16进制
                 Object类的使用：Object类在java.lang包下，是所有类的根。任何类的对象，都可以调用Object类中的方法，包括数组对象。
      *@Deprecated:该注解标注的内容，表示已过时
      *@SuppressWarnings:压制警告
 *自定义注解：
    *注解本质：本质上是一个接口，该接口默认继承java.long。annotation包下的Annotation接口类，
           格式：
                上：元注解（jdk定义好的）
                        *@Target:描述注解能够作用的位置
                                    *ElementType取值:
                                        *Type:可以作用于类上
                                        *METHOD:可以作用于方法上
                                        *FIELD:可以作用于成员变量上
                        *@Retention:描述注解注解能被保留的阶段（resource,class,runtime）
                                    *@Retention(RetentionPolicy.RESOURCE):当前被描述的注解，不会保留到class字节码文件中去，不会被JVM读取到
                                    *@Retention(RetentionPolicy.CLASS):当前被描述的注解，会保留到class字节码文件中去，不会被JVM读取到
                                    *@Retention(RetentionPolicy.RUNTIME):当前被描述的注解，会保留到class字节码文件中去，并被JVM读取到
                        *@Documented:描述注解是否被抽取到api文档中
                        *@Inherited:描述注解是否被子类继承
                下：public @interface Anno{}
       属性：接口中的抽象方法
                *基本数据类型
                *String
                *枚举
                *注解
                *以上类型的数组
                




